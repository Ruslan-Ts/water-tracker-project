{"version":3,"file":"static/js/683.c8688936.chunk.js","mappings":"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","sources":["js/validation/passwordStrength.js","components/forms/PasswordMeter.styled.jsx","components/forms/PasswordToolTip/PasswordToolTip.styled.jsx","components/forms/PasswordToolTip/PasswordToolTip.jsx","Pages/SignUpPage.jsx","components/forms/PasswordInput/PasswordInput.jsx","components/forms/PasswordInput/PasswordInput.styled.jsx"],"sourcesContent":["import zxcvbn from 'zxcvbn';\n\nexport const calculateStrength = password => {\n  const result = zxcvbn(password);\n  const strength = (result.score / 4) * 100; // Normalize the score to a percentage\n\n  return strength;\n};\n\nexport const getTitle = strength => {\n  if (strength === 0) {\n    return 'Very weak';\n  } else if (strength === 25) {\n    return 'Weak';\n  } else if (strength === 50) {\n    return 'Medium';\n  } else if (strength === 75) {\n    return 'Strong';\n  } else {\n    return 'Very strong';\n  }\n};\n\nexport const getColor = strength => {\n  if (strength === 0) return 'red';\n  if (strength <= 25) return 'orange';\n  if (strength <= 50) return 'yellow';\n  if (strength <= 75) return 'lightgreen';\n  return 'green';\n};\n\nexport const checkPassword = {\n  hasLetters: password => /[a-z]/.test(password) && /[A-Z]/.test(password),\n  hasNumber: password => /\\d/.test(password),\n  hasSpecialSymb: password => /[!@#$%^&*()_+{}[\\]:;<>,.?~\\\\/-]/.test(password),\n};\n","import styled from 'styled-components';\nimport { getColor } from 'js/validation/passwordStrength';\n\nexport const PasswordMeter = styled.div`\n  width: ${props => {\n    if (props.$score === 0) {\n      return '10%';\n    }\n    return props.$score + '%';\n  }};\n  background-color: ${props => getColor(props.$score)};\n  height: 5px;\n  border-radius: 5px;\n`;\n","import styled from 'styled-components';\nimport theme from 'CommonStyle/theme';\n\nexport const PasswordTipStyled = styled.div`\n  position: relative;\n  @media screen and (max-width: 767px) {\n    display: none;\n  }\n  button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 28px;\n    height: 28px;\n    background-color: ${theme.colors.primaryAccent};\n    color: ${theme.colors.primaryLight};\n    position: absolute;\n    right: -35px;\n    top: 50%;\n    transform: translateY(-50%);\n    border-radius: 100%;\n  }\n`;\n\nexport const PasswordTipParagraph = styled.p`\n  ${props => (props.$marked ? { color: 'green', opacity: 0.5 } : null)}\n  font-size: 14px;\n  padding-left: 10px;\n  margin: 5px 0;\n`;\n\nexport const PasswordTipInfo = styled.div`\n  display: ${props => (props.$show ? 'block' : 'none')};\n  position: absolute;\n  right: -46px;\n  top: 42px;\n  background-color: #eee;\n  width: 360px;\n  border-radius: 10px;\n  padding: 15px;\n  margin-top: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  z-index: 1;\n  &:before {\n    content: '';\n    position: absolute;\n    right: 5px;\n    top: -19px;\n    border-style: solid;\n    border-width: 20px 20px 0;\n    border-color: #eee transparent transparent transparent;\n    transform: rotate(180deg);\n  }\n  @media screen and (min-width: 1280px) {\n    width: 410px;\n  }\n  div {\n    font-size: 16px;\n    text-align: right;\n    margin-top: 10px;\n    span {\n      font-weight: 700;\n    }\n  }\n`;\n","import { useState } from 'react';\nimport {\n  PasswordTipInfo,\n  PasswordTipParagraph,\n  PasswordTipStyled,\n} from './PasswordToolTip.styled';\nimport { getTitle, checkPassword } from 'js/validation/passwordStrength';\n\nconst PasswordToolTip = ({ score, password }) => {\n  const [showTip, setShowTip] = useState(false);\n  const toggleToolTip = e => {\n    setShowTip(!showTip);\n  };\n\n  return (\n    <PasswordTipStyled>\n      <button type=\"button\" onClick={toggleToolTip}>\n        ?\n      </button>\n      <PasswordTipInfo $show={showTip}>\n        <h4>Make sure your password has:</h4>\n        <PasswordTipParagraph $marked={checkPassword.hasNumber(password)}>\n          Numbers.\n        </PasswordTipParagraph>\n        <PasswordTipParagraph $marked={checkPassword.hasLetters(password)}>\n          Both uppercase and lowercase letters.\n        </PasswordTipParagraph>\n        <PasswordTipParagraph $marked={checkPassword.hasSpecialSymb(password)}>\n          Special symbols like:!\"#$%&'()*+,-./:;&lt;=&gt;?@[\\]&#123;&#124;&#125;\n          ^_`~\n        </PasswordTipParagraph>\n        <div>\n          Password strength: <span>{getTitle(score)}</span>\n        </div>\n      </PasswordTipInfo>\n    </PasswordTipStyled>\n  );\n};\n\nexport default PasswordToolTip;\n","import { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { signUpThunk } from 'redux/auth/thunk';\n\nimport { Button } from 'CommonStyle/Buttons/Button.styled';\nimport { RouterLink } from 'CommonStyle/RouterLink/RouterLink.styled';\nimport { Title } from 'CommonStyle/Title/Title.styled';\n\nimport { AuthForm } from 'components/forms/AuthForm.styled';\nimport { Input } from 'components/forms/Input.styled';\nimport { FormLabel } from 'components/forms/FormLabel.styled';\nimport { InputError } from 'components/forms/InputError.styled';\nimport { PasswordMeter } from 'components/forms/PasswordMeter.styled';\nimport PasswordInput from 'components/forms/PasswordInput/PasswordInput';\nimport PasswordToolTip from 'components/forms/PasswordToolTip/PasswordToolTip';\nimport { PasswordInputWrapper } from 'components/forms/PasswordInput/PasswordInput.styled';\nimport SignLayout from 'components/SignLayout/SignLayout';\n\nimport { signUpSchema } from 'js/validation/schemas';\nimport { calculateStrength } from 'js/validation/passwordStrength';\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = e => {\n    const { email, password } = e;\n    dispatch(signUpThunk({ email, password }));\n  };\n\n  const {\n    values,\n    touched,\n    errors,\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    setFieldValue,\n  } = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n      strengthScore: 0,\n    },\n    validationSchema: signUpSchema,\n    onSubmit,\n  });\n  const handlePasswordChange = e => {\n    const password = e.target.value;\n    const score = calculateStrength(password);\n\n    setFieldValue('password', password);\n    setFieldValue('strengthScore', score);\n  };\n\n  return (\n    <SignLayout>\n      <AuthForm onSubmit={handleSubmit}>\n        <Title>Sign Up</Title>\n        <FormLabel>\n          Enter your email\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Email\"\n            $error={touched.email && errors.email}\n          />\n          {touched.email && errors.email && (\n            <InputError>{errors.email}</InputError>\n          )}\n        </FormLabel>\n        <FormLabel>\n          Enter your password\n          <PasswordInputWrapper>\n            <PasswordInput\n              name=\"password\"\n              value={values.password}\n              onChange={handlePasswordChange}\n              onBlur={handleBlur}\n              placeholder=\"Password\"\n              $error={touched.password && errors.password}\n            />\n            {values.password && (\n              <PasswordToolTip\n                score={values.strengthScore}\n                password={values.password}\n              />\n            )}\n          </PasswordInputWrapper>\n          {values.password && <PasswordMeter $score={values.strengthScore} />}\n          {touched.password && errors.password && (\n            <InputError>{errors.password}</InputError>\n          )}\n        </FormLabel>\n        <FormLabel>\n          Repeat password\n          <PasswordInput\n            name=\"repeatPassword\"\n            value={values.repeatPassword}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Repeat password\"\n            $error={touched.repeatPassword && errors.repeatPassword}\n          />\n          {touched.repeatPassword && errors.repeatPassword && (\n            <InputError>{errors.repeatPassword}</InputError>\n          )}\n        </FormLabel>\n        <Button type=\"submit\">Sign up</Button>\n        <RouterLink to=\"/signin\">Sign in</RouterLink>\n      </AuthForm>\n    </SignLayout>\n  );\n};\n\nexport default SignUp;\n","import { useState } from 'react';\n\nimport { Input } from '../Input.styled';\nimport { PasswordInputStyled } from './PasswordInput.styled';\n\nimport sprite from '../../../img/sprite.svg';\n\nconst PasswordInput = ({ ...fields }) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <PasswordInputStyled>\n      <Input type={showPassword ? 'text' : 'password'} {...fields} />\n      <button onClick={togglePassword} type=\"button\">\n        <svg>\n          <use href={sprite + (showPassword ? '#eye' : '#eye-slash')}></use>\n        </svg>\n      </button>\n    </PasswordInputStyled>\n  );\n};\n\nexport default PasswordInput;\n","import theme from 'CommonStyle/theme';\nimport styled from 'styled-components';\n\nexport const PasswordInputStyled = styled.div`\n  position: relative;\n  width: 100%;\n  button {\n    display: flex;\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    svg {\n      width: 16px;\n      height: 16px;\n      fill: none;\n      stroke: ${theme.colors.primaryAccent};\n    }\n  }\n`;\n\nexport const PasswordInputWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n`;\n"],"names":["checkPassword","password","test","PasswordMeter","styled","_templateObject","_taggedTemplateLiteral","props","$score","getColor","strength","PasswordTipStyled","theme","PasswordTipParagraph","_templateObject2","$marked","color","opacity","PasswordTipInfo","_templateObject3","$show","_ref","score","showTip","setShowTip","useState","_jsxs","children","_jsx","type","onClick","e","SignUp","dispatch","useDispatch","values","touched","errors","handleSubmit","handleChange","handleBlur","setFieldValue","useFormik","initialValues","email","repeatPassword","strengthScore","validationSchema","signUpSchema","onSubmit","signUpThunk","SignLayout","AuthForm","Title","FormLabel","Input","name","value","onChange","onBlur","placeholder","$error","InputError","PasswordInputWrapper","PasswordInput","target","zxcvbn","calculateStrength","PasswordToolTip","Button","RouterLink","to","fields","showPassword","setShowPassword","PasswordInputStyled","togglePassword","href","sprite"],"sourceRoot":""}